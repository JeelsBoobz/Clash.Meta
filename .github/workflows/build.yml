name: Build
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - "docs/**"
      - "README.md"
      - ".github/ISSUE_TEMPLATE/**"
    branches:
      - Alpha
    tags:
      - "v*"
jobs:
  Build:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              type: "WithoutCGO",
              target: "linux-amd64 linux-amd64-compatible",
              id: "1",
            }
          - {
              type: "WithoutCGO",
              target: "linux-armv5 linux-armv6 linux-armv7",
              id: "2",
            }
          - {
              type: "WithoutCGO",
              target: "linux-arm64 linux-mips64 linux-mips64le",
              id: "3",
            }
          - {
              type: "WithoutCGO",
              target: "linux-mips-softfloat linux-mips-hardfloat linux-mipsle-softfloat linux-mipsle-hardfloat",
              id: "4",
            }
          - {
              type: "WithoutCGO",
              target: "linux-386 linux-riscv64 linux-loong64",
              id: "5",
            }
          - {
              type: "WithoutCGO",
              target: "freebsd-386 freebsd-amd64 freebsd-arm64",
              id: "6",
            }
          - {
              type: "WithoutCGO",
              target: "windows-amd64-compatible windows-amd64 windows-386",
              id: "7",
            }
          - {
              type: "WithoutCGO",
              target: "windows-arm64 windows-arm32v7",
              id: "8",
            }
          - {
              type: "WithoutCGO",
              target: "darwin-amd64 darwin-arm64 android-arm64",
              id: "9",
            }
          - { type: "WithCGO", target: "windows/*", id: "1" }
          - { type: "WithCGO", target: "linux/386", id: "2" }
          - { type: "WithCGO", target: "linux/amd64", id: "3" }
          - { type: "WithCGO", target: "linux/arm64,linux/riscv64", id: "4" }
          - { type: "WithCGO", target: "linux/arm,", id: "5" }
          - { type: "WithCGO", target: "linux/arm-6,linux/arm-7", id: "6" }
          - { type: "WithCGO", target: "linux/mips,linux/mipsle", id: "7" }
          - { type: "WithCGO", target: "linux/mips64", id: "8" }
          - { type: "WithCGO", target: "linux/mips64le", id: "9" }
          - { type: "WithCGO", target: "darwin-10.16/*", id: "10" }
          - { type: "WithCGO", target: "android", id: "11" }

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set variables
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash

      - name: Set variables
        if: ${{github.ref_name=='Alpha'}}
        run: echo "VERSION=alpha-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        shell: bash

      - name: Set variables
        if: ${{github.ref_name=='' || github.ref_type=='tag'}}
        run: echo "VERSION=$(git describe --tags)" >> $GITHUB_ENV
        shell: bash

      - name: Set ENV
        run: |
          echo "NAME=mihomo" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ShortSHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
          echo "BUILDTIME=$(TZ=Asia/Jakarta date)" >> $GITHUB_ENV
          echo "TAGS=with_gvisor,with_low_memory" >> $GITHUB_ENV
          echo "LDFLAGS=-X 'github.com/metacubex/mihomo/constant.Version=${VERSION}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME}' -w -s -buildid=" >> $GITHUB_ENV
        shell: bash

      - name: Set ENV
        if: ${{ matrix.job.type=='WithCGO' }}
        run: |
          echo "TAGS=with_cgo,with_gvisor,with_low_memory" >> $GITHUB_ENV
          echo "LDFLAGS=-X 'github.com/metacubex/mihomo/constant.Version=${VERSION}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME}' -w -s -buildid=" >> $GITHUB_ENV
        shell: bash

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
          check-latest: true

      - name: Build WithoutCGO
        if: ${{ matrix.job.type!='WithCGO' }}
        env:
          NAME: mihomo
          BINDIR: bin
        run: make -j$(($(nproc) + 1)) ${{ matrix.job.target }}

      - uses: nttld/setup-ndk@v1
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android' }}
        id: setup-ndk
        with:
          ndk-version: r26b
          add-to-path: true

      - name: Build Android
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          mkdir bin
          CC=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin
          CGO_ENABLED=1 CC=${CC}/armv7a-linux-androideabi33-clang GOARM=7 GOARCH=arm GOOS=android go build -tags ${TAGS} -trimpath -ldflags "${LDFLAGS}" -o bin/${NAME}-android-armv7
          CGO_ENABLED=1 CC=${CC}/aarch64-linux-android33-clang GOARCH=arm64 GOOS=android go build -tags ${TAGS} -trimpath -ldflags "${LDFLAGS}" -o bin/${NAME}-android-arm64
          CGO_ENABLED=1 CC=${CC}/i686-linux-android33-clang GOARCH=386 GOOS=android go build -tags ${TAGS} -trimpath -ldflags "${LDFLAGS}" -o bin/${NAME}-android-x86
          CGO_ENABLED=1 CC=${CC}/x86_64-linux-android33-clang GOARCH=amd64 GOOS=android go build -tags ${TAGS} -trimpath -ldflags "${LDFLAGS}" -o bin/${NAME}-android-x86_64
      
      - name: Set up xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android' }}
        run: |
          docker pull techknowlogick/xgo:latest
          go install src.techknowlogick.com/xgo@latest

      - name: Build by xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          mkdir bin
          xgo --branch ${{ github.ref_name }} --targets="${{ matrix.job.target }}" --tags="${TAGS}" -ldflags="${LDFLAGS}" --out bin/${NAME} github.com/${{ github.repository }}

      - name: Rename WithCGO
        if: ${{ matrix.job.type=='WithCGO' }}
        run: |
          cd bin
          ls -la
          cp ../.github/rename-cgo.sh ./
          bash ./rename-cgo.sh
          rm ./rename-cgo.sh
          ls -la
          cd ..

      - name: Zip
        if: ${{ success() }}
        run: |
          cd bin
          ls -la
          chmod +x *
          cp ../.github/release.sh ./
          bash ./release.sh
          rm ./release.sh
          ls -la
          cd ..

      - name: Save version
        run: echo ${VERSION} > bin/version.txt
        shell: bash

      - uses: actions/upload-artifact@v3
        if: ${{ success() }}
        with:
          name: artifact
          path: bin/

  Upload-Prerelease:
    permissions: write-all
    if: ${{ github.ref_type=='branch' }}
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: bin/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: bin

      - name: Delete tag Prerelease-${{ github.ref_name }} if exists
        uses: JeelsBoobz/delete-tag-and-release@master
        with:
          delete_release: true
          tag_name: Prerelease-${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Env
        run: |
          echo "BUILDTIME=$(TZ=Asia/Jakarta date)" >> $GITHUB_ENV
        shell: bash

      - name: Tag Repo
        uses: richardsimko/update-tag@v1.0.11
        with:
          tag_name: Prerelease-${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          cat > release.txt << 'EOF'
          Release created at  ${{ env.BUILDTIME }}
          Synchronize ${{ github.ref_name }} branch code updates, keeping only the latest version
          <br>
          [我应该下载哪个文件? / Which file should I download?](https://github.com/MetaCubeX/mihomo/wiki/FAQ)
          [二进制文件筛选 / Binary file selector] (https://metacubex.github.io/Meta-Docs/startup/#_1)
          [查看文档 / Docs](https://metacubex.github.io/Meta-Docs/)
          EOF

      - name: Upload Prerelease
        id: prerelease
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        with:
          tag_name: Prerelease-${{ github.ref_name }}
          files: bin/*
          prerelease: true
          body_path: release.txt

      - name: Publish release
        if: ${{ success() }}
        uses: StuYarrow/publish-release@v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          id: ${{ steps.prerelease.outputs.id }}

  Upload-Release:
    permissions: write-all
    if: ${{ github.ref_type=='tag' }}
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get tags
        run: |
          echo "CURRENTVERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          git fetch --tags
          echo "PREVERSION=$(git describe --tags --abbrev=0 HEAD^)" >> $GITHUB_ENV

      - name: Generate release notes
        run: |
          cp ./.github/genReleaseNote.sh ./
          bash ./genReleaseNote.sh -v ${PREVERSION}...${CURRENTVERSION}
          rm ./genReleaseNote.sh

      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: bin/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: bin

      - name: Upload Release
        id: release
        uses: softprops/action-gh-release@v1
        if: ${{ success() }}
        with:
          tag_name: ${{ github.ref_name }}
          files: bin/*
          generate_release_notes: true
          body_path: release.md

      - name: Publish release
        if: ${{ success() }}
        uses: StuYarrow/publish-release@v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
